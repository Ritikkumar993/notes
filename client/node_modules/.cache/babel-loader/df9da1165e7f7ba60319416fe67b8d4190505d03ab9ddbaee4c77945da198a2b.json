{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ritik kumar\\\\OneDrive - Lovely Professional University\\\\Documents\\\\Note.me\\\\client\\\\src\\\\pages\\\\notes\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n// import styles from \"./notes.module.scss\"\n// import Wrapper from '../../components/hoc/wrapper';\n// import Greetings from '../../components/atoms/greetings';\n// import Note from '../../components/cards/note';\n// import notesData from \"../../data/notes.json\"\n// import utils from '../../utils/localStorage';\n// import { NOTES_DATA } from '../../config/types';\n\n// function Notes() {\n//   const [notesCol, setNotesCol] = useState([]);\n//   const Data= utils.getFromLocalStorage(NOTES_DATA);\n//   // useEffect(()=>{\n//   //   // console.log({Data});\n//   //   if(Data && Data.length){\n//   //     setNotesCol(Data);\n//   //     return;\n//   //   }\n//   //   // to prevent an empty screen first time\n//   //   utils.addToLocalStorage(NOTES_DATA,notesData);\n//   //   setNotesCol(notesData);\n\n//   // },[Data])\n\n//   return (\n//    <section className={styles.container}>\n//    <Greetings/>\n\n//    <main>\n//     {/* <Note/> */}\n//     {\n//       notesCol.map((note)=> <Note\n//        key={note.id} text={note.text} color={note.color} date={note.createdAt}/>)\n//     }\n//    </main>\n//    </section>\n//   )\n// }\n\n// export default Wrapper( Notes);\n\nimport React, { useEffect, useState } from 'react';\nimport styles from \"./notes.module.scss\";\nimport Wrapper from '../../components/hoc/wrapper';\nimport Greetings from '../../components/atoms/greetings';\nimport Note from '../../components/cards/note';\nimport { getTaskForCurrentUser } from '../../apis/task-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomColor = () => {\n  const colors = [\"rgba(251, 235, 149,0.4)\", \"rgba(151, 210, 188,0.4)\", \"rgba(253, 186, 163,0.4)\", \"rgba(182, 165, 203,0.4)\", \"rgba(174, 223, 232, 0.6)\"];\n  const randomIndex = Math.floor(Math.random() * colors.length);\n  return colors[randomIndex];\n};\nfunction Notes() {\n  _s();\n  const [notesCol, setNotesCol] = useState([]);\n  const [intervalId, setIntervalId] = useState(null);\n  useEffect(() => {\n    fetchTasks();\n    const id = setInterval(fetchTasks, 3000);\n    setIntervalId(id);\n    return () => clearInterval(id);\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const tasks = await getTaskForCurrentUser();\n      const tasksWithColors = tasks.map(task => ({\n        ...task,\n        color: getRandomColor()\n      }));\n      setNotesCol(tasksWithColors);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const handleTaskDeleted = deletedTaskId => {\n    setNotesCol(prevNotes => prevNotes.filter(note => note._id !== deletedTaskId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Greetings, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: notesCol.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        task: note,\n        color: note.color,\n        onDelete: handleTaskDeleted\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(Notes, \"Qilhwk/fuL1IfS1G8Wm+GL4nChI=\");\n_c = Notes;\nexport default _c2 = Wrapper(Notes);\nvar _c, _c2;\n$RefreshReg$(_c, \"Notes\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","styles","Wrapper","Greetings","Note","getTaskForCurrentUser","jsxDEV","_jsxDEV","getRandomColor","colors","randomIndex","Math","floor","random","length","Notes","_s","notesCol","setNotesCol","intervalId","setIntervalId","fetchTasks","id","setInterval","clearInterval","tasks","tasksWithColors","map","task","color","error","console","handleTaskDeleted","deletedTaskId","prevNotes","filter","note","_id","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","_c","_c2","$RefreshReg$"],"sources":["C:/Users/Ritik kumar/OneDrive - Lovely Professional University/Documents/Note.me/client/src/pages/notes/index.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import styles from \"./notes.module.scss\"\n// import Wrapper from '../../components/hoc/wrapper';\n// import Greetings from '../../components/atoms/greetings';\n// import Note from '../../components/cards/note';\n// import notesData from \"../../data/notes.json\"\n// import utils from '../../utils/localStorage';\n// import { NOTES_DATA } from '../../config/types';\n\n// function Notes() {\n//   const [notesCol, setNotesCol] = useState([]);\n//   const Data= utils.getFromLocalStorage(NOTES_DATA);\n//   // useEffect(()=>{\n//   //   // console.log({Data});\n//   //   if(Data && Data.length){\n//   //     setNotesCol(Data);\n//   //     return;\n//   //   }\n//   //   // to prevent an empty screen first time\n//   //   utils.addToLocalStorage(NOTES_DATA,notesData);\n//   //   setNotesCol(notesData);\n    \n//   // },[Data])\n\n//   return (\n//    <section className={styles.container}>\n//    <Greetings/>\n\n//    <main>\n//     {/* <Note/> */}\n//     {\n//       notesCol.map((note)=> <Note\n//        key={note.id} text={note.text} color={note.color} date={note.createdAt}/>)\n//     }\n//    </main>\n//    </section>\n//   )\n// }\n\n// export default Wrapper( Notes);\n\nimport React, { useEffect, useState } from 'react';\nimport styles from \"./notes.module.scss\";\nimport Wrapper from '../../components/hoc/wrapper';\nimport Greetings from '../../components/atoms/greetings';\nimport Note from '../../components/cards/note';\nimport { getTaskForCurrentUser } from '../../apis/task-api';\n\nconst getRandomColor = () => {\n  const colors = [\n    \"rgba(251, 235, 149,0.4)\",\n    \"rgba(151, 210, 188,0.4)\",\n    \"rgba(253, 186, 163,0.4)\",\n    \"rgba(182, 165, 203,0.4)\",\n    \"rgba(174, 223, 232, 0.6)\"\n  ];\n  const randomIndex = Math.floor(Math.random() * colors.length);\n  return colors[randomIndex];\n};\n\nfunction Notes() {\n  const [notesCol, setNotesCol] = useState([]);\n  const [intervalId, setIntervalId] = useState(null);\n\n  useEffect(() => {\n    fetchTasks();\n    const id = setInterval(fetchTasks, 3000); \n    setIntervalId(id);\n\n    return () => clearInterval(id); \n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      const tasks = await getTaskForCurrentUser();\n      const tasksWithColors = tasks.map(task => ({\n        ...task,\n        color: getRandomColor()\n      }));\n      setNotesCol(tasksWithColors);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    } \n  };\n\n  const handleTaskDeleted = (deletedTaskId) => {\n    setNotesCol(prevNotes => prevNotes.filter(note => note._id !== deletedTaskId));\n  };\n\n  return (\n    <section className={styles.container}>\n      <Greetings />\n\n      <main>\n        {\n          notesCol.map((note) => (\n            <Note\n              key={note._id}\n              task={note}\n              color={note.color}\n              onDelete={handleTaskDeleted}\n            />\n          ))\n        }\n      </main>\n    </section>\n  );\n}\n\nexport default Wrapper(Notes);\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}